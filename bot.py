import pytz
import os
import random
import json
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
import logging
from flask import Flask

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    exit(1)

PORT = int(os.environ.get('PORT', 5000))

SUBSCRIBERS_FILE = "subscribers.json"
IMAGES_DIR = "images"

if not os.path.exists(IMAGES_DIR):
    os.makedirs(IMAGES_DIR)
    logging.warning(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é {IMAGES_DIR}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
def load_subscribers():
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, 'r') as f:
                return json.load(f)
        return []
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {e}")
        return []

def save_subscribers(subscribers):
    try:
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {e}")

# –†–æ–∑—Å–∏–ª–∫–∞
def send_daily_fact(bot):
    try:
        images = os.listdir(IMAGES_DIR)
        if not images:
            logging.error("–ü–∞–ø–∫–∞ images –ø—É—Å—Ç–∞.")
            return

        image_file = random.choice(images)
        image_path = os.path.join(IMAGES_DIR, image_file)
        caption = f"–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π —Ñ–∞–∫—Ç –¥–Ω—è üìú"

        subscribers = load_subscribers()
        if not subscribers:
            logging.warning("–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.")
            return

        for chat_id in subscribers:
            try:
                with open(image_path, "rb") as photo:
                    bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
                logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ {chat_id}: {image_file}")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ {chat_id}: {e}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∏
    def subscribe(update: Update, context: CallbackContext):
        chat_id = update.effective_chat.id
        subscribers = load_subscribers()

        if chat_id not in subscribers:
            subscribers.append(chat_id)
            save_subscribers(subscribers)
            logging.info(f"–ü—ñ–¥–ø–∏—Å–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}. –ü–æ—Ç–æ—á–Ω—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏: {load_subscribers()}")
            update.message.reply_text("–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤. üìú")
        else:
            update.message.reply_text("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")
    
def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()

    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers(subscribers)
        update.message.reply_text("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏.")
    else:
        update.message.reply_text("–í–∏ –Ω–µ –±—É–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        "/subscribe ‚Äî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å\n"
        "/unsubscribe ‚Äî –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å\n"
        "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞"
    )

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —â–æ–¥–µ–Ω–Ω–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /subscribe, —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å."
    )

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î!"

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("subscribe", subscribe))
    dispatcher.add_handler(CommandHandler("unsubscribe", unsubscribe))

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    kyiv_tz = pytz.timezone('Europe/Kyiv')
    scheduler = BackgroundScheduler(timezone=kyiv_tz)
    scheduler.add_job(
        send_daily_fact,
        'cron',
        hour=20,
        minute=35,
        timezone=kyiv_tz,
        args=[updater.bot]
    )
    scheduler.start()
    logging.info("–†–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ 19:00 –∑–∞ –ö–∏—î–≤–æ–º.")

    # –î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    logging.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: {scheduler.get_jobs()}")

    #updater.start_polling()
    app.run(host='0.0.0.0', port=PORT, threaded=True)

if __name__ == '__main__':
    main()
