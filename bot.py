import pytz
import os
import random
from telegram import Bot
from apscheduler.schedulers.background import BackgroundScheduler
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —ñ chat_id –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
if not TOKEN or not CHAT_ID:
    logging.error("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN –∞–±–æ CHAT_ID –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
    exit(1)

bot = Bot(token=TOKEN)

# –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
IMAGES_DIR = "images"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–∞–ø–∫–∏ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
if not os.path.exists(IMAGES_DIR) or not os.path.isdir(IMAGES_DIR):
    logging.error(f"–ü–æ–º–∏–ª–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {IMAGES_DIR} –Ω–µ —ñ—Å–Ω—É—î")
    exit(1)

def send_daily_fact():
    try:
        images = os.listdir(IMAGES_DIR)
        if not images:
            logging.error("–ü–∞–ø–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        image_file = random.choice(images)
        image_path = os.path.join(IMAGES_DIR, image_file)
        caption = f"–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π —Ñ–∞–∫—Ç –¥–Ω—è üìú"  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏
        
        with open(image_path, "rb") as photo:
            bot.send_photo(chat_id=CHAT_ID, photo=photo, caption=caption)
        logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_file}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–∞–∫—Ç—É: {e}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑ —á–∞—Å–æ–≤–æ—é –∑–æ–Ω–æ—é
kyiv_tz = pytz.timezone('Europe/Kyiv')
scheduler = BackgroundScheduler(timezone=kyiv_tz)
scheduler.add_job(send_daily_fact, 'cron', hour=17, minute=30, timezone=kyiv_tz)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
scheduler.start()

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞—é —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
try:
    send_daily_fact()  # –¢–µ—Å—Ç–æ–≤–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
except Exception as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")

# –¢—Ä–∏–º–∞—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É –∑–∞–ø—É—â–µ–Ω–æ—é –±—ñ–ª—å—à –µ–ª–µ–≥–∞–Ω—Ç–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º
try:
    # –ë–ª–æ–∫—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è (—â–æ –Ω–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è)
    import signal
    
    def shutdown(signum, frame):
        scheduler.shutdown()
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
        exit(0)
    
    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGTERM, shutdown)
    
    # –ë–µ–∑–ø–µ—á–Ω—ñ—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    signal.pause()
except (KeyboardInterrupt, SystemExit):
    scheduler.shutdown()
    print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")