import pytz
import os
import random
import json
import psycopg2
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
import logging
from flask import Flask, request
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
PORT = int(os.environ.get('PORT', 5000))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
SUBSCRIBERS_FILE = "subscribers.json"
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGES_DIR = "images"

# –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
SEND_HOUR_1 = 17
SEND_MINUTE_1 = 0
SEND_HOUR_2 = 20
SEND_MINUTE_2 = 0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
if not os.path.exists(IMAGES_DIR):
    os.makedirs(IMAGES_DIR)
    logging.warning(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {IMAGES_DIR}")
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞
    with open(os.path.join(IMAGES_DIR, "test_image.txt"), "w") as f:
        f.write("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    logging.info("–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ images")

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    logging.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

def get_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT chat_id FROM subscribers")
        rows = cursor.fetchall()
        subscribers = [row[0] for row in rows]
        cursor.close()
        conn.close()
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}")
        return subscribers
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM subscribers")  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        for chat_id in subscribers:
            cursor.execute("INSERT INTO subscribers (chat_id) VALUES (%s)", (chat_id,))
        conn.commit()
        cursor.close()
        conn.close()
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def check_images():
    images = [f for f in os.listdir(IMAGES_DIR) if os.path.isfile(os.path.join(IMAGES_DIR, f))]
    if not images:
        logging.error("–ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        with open(os.path.join(IMAGES_DIR, "test_image.txt"), "w") as f:
            f.write("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return ["test_image.txt"]
    return images

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def send_daily_fact(bot):
    try:
        logging.info("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = check_images()
        if not images:
            logging.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
            return
        
        image_file = random.choice(images)
        image_path = os.path.join(IMAGES_DIR, image_file)
        caption = f"–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π —Ñ–∞–∫—Ç –¥–Ω—è üìú - {datetime.datetime.now().strftime('%d.%m.%Y')}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = load_subscribers()
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}")
        
        if not subscribers:
            logging.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–æ–≤.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ID, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            default_id = os.getenv("DEFAULT_CHAT_ID")
            if default_id:
                try:
                    with open(image_path, "rb") as photo:
                        bot.send_photo(chat_id=default_id, photo=photo, caption=caption + " (—Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ ID {default_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return
        
        successful = 0
        for chat_id in subscribers:
            try:
                with open(image_path, "rb") as photo:
                    bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {image_file}")
                successful += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {chat_id}: {e}")
        
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}/{len(subscribers)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
def send_now(update: Update, context: CallbackContext):
    admin_ids = os.getenv("ADMIN_IDS", "").split(",")
    chat_id = str(update.effective_chat.id)
    
    if chat_id in admin_ids:
        update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...")
        send_daily_fact(context.bot)
        update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def status(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    
    if chat_id in subscribers:
        update.message.reply_text(f"–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏. –í–æ–Ω–∏ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –æ {SEND_HOUR_1}:00 —Ç–∞ {SEND_HOUR_2}:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.")
    else:
        update.message.reply_text("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /subscribe –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        save_subscribers(subscribers)
        update.message.reply_text(f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏! –§–∞–∫—Ç–∏ –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å —â–æ–¥–Ω—è –æ {SEND_HOUR_1}:00 —Ç–∞ {SEND_HOUR_2}:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.")
    else:
        update.message.reply_text("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers(subscribers)
        update.message.reply_text("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤.")
    else:
        update.message.reply_text("–í–∏ –Ω–µ –±—É–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        "/subscribe - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–∞–∫—Ç–∏\n"
        "/unsubscribe - –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤\n"
        "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —â–æ–¥–µ–Ω–Ω–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /subscribe, —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤. "
        f"–§–∞–∫—Ç–∏ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –æ {SEND_HOUR_1}:00 —Ç–∞ {SEND_HOUR_2}:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º."
    )

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è Render)
    app = Flask(__name__)
    
    @app.route('/')
    def index():
        return "–ë–æ—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø—É—â–µ–Ω–æ! –í–µ—Ä—Å—ñ—è 1.1.0"
    
    @app.route('/ping')
    def ping():
        return "Pong! –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: " + datetime.datetime.now().strftime("%H:%M:%S %d.%m.%Y")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ updater
    bot = Bot(TOKEN)
    updater = Updater(bot=bot, use_context=True)  # Use the explicit bot instance
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("subscribe", subscribe))
    dispatcher.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dispatcher.add_handler(CommandHandler("status", status))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    dispatcher.add_handler(CommandHandler("sendnow", send_now))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º –ö–∏–µ–≤–∞
    kyiv_tz = pytz.timezone('Europe/Kyiv')
    scheduler = BackgroundScheduler(timezone=kyiv_tz)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 17:00
    scheduler.add_job(
        send_daily_fact,
        'cron',
        hour=SEND_HOUR_1,
        minute=SEND_MINUTE_1,
        timezone=kyiv_tz,
        args=[bot],  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –∑–∞–¥–∞—á—É
        id='morning_fact'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 20:00
    scheduler.add_job(
        send_daily_fact,
        'cron',
        hour=SEND_HOUR_2,
        minute=SEND_MINUTE_2,
        timezone=kyiv_tz,
        args=[bot],  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –∑–∞–¥–∞—á—É
        id='evening_fact'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    def keep_alive():
        logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (UTC): " +
                     datetime.datetime.utcnow().strftime("%H:%M:%S %d.%m.%Y"))
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        jobs = scheduler.get_jobs()
        for job in jobs:
            if job.id in ['morning_fact', 'evening_fact']:
                next_run = job.next_run_time
                logging.info(f"–ù–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {job.id}: {next_run}")
    
    scheduler.add_job(keep_alive, 'interval', minutes=15, id='keep_alive')
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    logging.info(f"–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ. –§–∞–∫—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è –æ {SEND_HOUR_1}:00 —Ç–∞ {SEND_HOUR_2}:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subs = load_subscribers()
    logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {subs}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render
    if 'RENDER_EXTERNAL_HOSTNAME' in os.environ:
        webhook_url = f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook"
        updater.bot.set_webhook(webhook_url)
        logging.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {webhook_url}")
    else:
        logging.warning("RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Flask (Render –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    @app.route("/webhook", methods=['POST'])
    def webhook():
        update = Update.de_json(request.get_json(force=True), bot=updater.bot)  # Pass bot to from_json
        dispatcher.process_update(update)
        return "ok", 200
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É
    app.run(host='0.0.0.0', port=PORT)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É subscribers, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS subscribers (chat_id BIGINT PRIMARY KEY)""")
        conn.commit()
        cursor.close()
        conn.close()
        logging.info("–¢–∞–±–ª–∏—Ü—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞/—Å—Ç–≤–æ—Ä–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {e}")
    main()